/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/3Xpl0it3r/minio-operator/pkg/apis/miniooperator.3xpl0it3r.cn/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// MinioLister helps list Minios.
// All objects returned here must be treated as read-only.
type MinioLister interface {
	// List lists all Minios in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Minio, err error)
	// Minios returns an object that can list and get Minios.
	Minios(namespace string) MinioNamespaceLister
	MinioListerExpansion
}

// minioLister implements the MinioLister interface.
type minioLister struct {
	indexer cache.Indexer
}

// NewMinioLister returns a new MinioLister.
func NewMinioLister(indexer cache.Indexer) MinioLister {
	return &minioLister{indexer: indexer}
}

// List lists all Minios in the indexer.
func (s *minioLister) List(selector labels.Selector) (ret []*v1alpha1.Minio, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Minio))
	})
	return ret, err
}

// Minios returns an object that can list and get Minios.
func (s *minioLister) Minios(namespace string) MinioNamespaceLister {
	return minioNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// MinioNamespaceLister helps list and get Minios.
// All objects returned here must be treated as read-only.
type MinioNamespaceLister interface {
	// List lists all Minios in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Minio, err error)
	// Get retrieves the Minio from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Minio, error)
	MinioNamespaceListerExpansion
}

// minioNamespaceLister implements the MinioNamespaceLister
// interface.
type minioNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Minios in the indexer for a given namespace.
func (s minioNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Minio, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Minio))
	})
	return ret, err
}

// Get retrieves the Minio from the indexer for a given namespace and name.
func (s minioNamespaceLister) Get(name string) (*v1alpha1.Minio, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("minio"), name)
	}
	return obj.(*v1alpha1.Minio), nil
}
